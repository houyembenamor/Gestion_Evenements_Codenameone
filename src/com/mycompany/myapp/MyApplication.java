package com.mycompany.myapp;


import com.codename1.location.GeofenceListener;



import com.codename1.ui.Button;

import com.codename1.ui.Command;
import com.codename1.ui.Component;

import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;



import com.codename1.ui.Toolbar;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.events.ActionEvent;
import static com.codename1.ui.events.ActionEvent.Type.Response;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.util.UIBuilder;

import java.io.IOException;








/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

     private Form current;
    public static Form mainForm,mainForm2,f3,hi,hi2 ;
    private Button addEventBtn,listEventsBtn, backBtn;
    private Container mainContainer,mainContainer2,c,mainContainer3 ;
    private Resources theme;
   

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");
        Toolbar.setGlobalToolbar(true);
    }
    
    public void start() {

    
        
        
     
        UIBuilder ui = new UIBuilder();
        addEventBtn = new Button("Add new Event");
       
        addEventBtn.getUnselectedStyle().setFgColor(5542241);
        listEventsBtn= new Button("My Events");
        listEventsBtn.getUnselectedStyle().setFgColor(5542241);
         
        listEventsBtn.getUnselectedStyle().setFgColor(5542241);
        
        mainContainer = new Container();
        mainContainer.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        mainContainer.add(addEventBtn);
        mainContainer.add(listEventsBtn);
    
        mainForm=new Form();
        mainForm.setLayout(new BorderLayout());
        mainForm.add(BorderLayout.CENTER,mainContainer);
        addEventBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                AddEvenement addBookUi = new AddEvenement();
                addBookUi.show();
            }
        });
        listEventsBtn.addActionListener(new ActionListener() {
           @Override
            public void actionPerformed(ActionEvent evt) {
                 
      
                new EvenementDAO().getEvenements();
            }
            
            
         
            
        });
        
        
        
         mainForm.getToolbar().addCommandToSideMenu("Map", null, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
            
                         Map d;
       d = new Map(theme) {};
       d.show();
            
            }
         
         
         });
      
        
        
       
        
        
        
        
      
        
        
        
        
        
        
        
        
         /* mainForm.getToolbar().addCommandToSideMenu("Capture", null, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                 mainContainer2 = new Container();
         // mainForm2=new Form();
          
       mainForm2 = new Form("Rounder", new BorderLayout());
           
         
               Toolbar.setGlobalToolbar(true);

Label picture = new Label("", "Container");
mainForm2.add(BorderLayout.CENTER, picture);
mainForm2.getUnselectedStyle().setBgColor(0xff0000);
mainForm2.getUnselectedStyle().setBgTransparency(255);
Style s = UIManager.getInstance().getComponentStyle("TitleCommand");
Image camera = FontImage.createMaterial(FontImage.MATERIAL_CAMERA, s);
mainForm2.getToolbar().addCommandToRightBar("", camera, (ev) -> {
    try {
        int width = Display.getInstance().getDisplayWidth();
        Image capturedImage = Image.createImage(Capture.capturePhoto(width, -1));
        Image roundMask = Image.createImage(width, capturedImage.getHeight(), 0xff000000);
        Graphics gr = roundMask.getGraphics();
        gr.setColor(0xffffff);
        gr.fillArc(0, 0, width, width, 0, 360);
        Object mask = roundMask.createMask();
        capturedImage = capturedImage.applyMask(mask);
        picture.setIcon(capturedImage);
        mainForm2.revalidate();
  
         mainForm2.show();
          mainForm2.addCommand(new BackCommand());
mainForm2.setBackCommand(new BackCommand());
    } catch(IOException err) {
        Log.e(err);
    }
        
});  

 
          // mainForm2.show();

            }

        
   });     */ 
       
          
          
        
         
           
           
          /*  mainForm.getToolbar().addCommandToSideMenu("GPS", null, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
  
mainContainer3 = new Container();
                 hi = new Form("GPS", new BorderLayout());
                Location loc = new Location();
    loc.setLatitude(36.898392);
    loc.setLongitude(10.189732);
            
    Geofence gf = new Geofence("test", loc, 100, 100000);
            
LocationManager.getLocationManager().addGeoFencing(GeofenceListenerImpl.class, gf);
            
hi.show();
            }
                
            });*/
        
           
           
           
           
           
           
 mainForm.show();
    }
    
 
    public class GeofenceListenerImpl implements GeofenceListener {
    public void onExit(String id) {
        System.out.println("Exited "+id);
    }

    public void onEntered(String id) {
        System.out.println("Entered "+id);
    }
}
    
    
    
class BackCommand extends Command {

		public BackCommand() {
			super("Back");
		}

		public void actionPerformed(ActionEvent evt) {
			mainForm.showBack();
	
}

}



    
       


    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }

}
